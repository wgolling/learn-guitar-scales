{"version":3,"sources":["Scale.js","App.js","serviceWorker.js","index.js"],"names":["Scale","name","notes","this","emptyArray","Array","twoOctaves","fill","scale_mode","modes","names","length","Error","patternToNotes","startingPoint","i","pattern","spotInPattern","nextNote","assert","require","Fret","props","className","onClick","value","FretBoard","key","toString","marks","j","frets","fretsPerString","push","renderFret","strings","renderString","React","Component","FretBoardInterface","empty","state","mode","scaleToFretboard","userValues","newValues","slice","setState","setMark","m","newScale","newNotes","newMarks","refreshMarks","changeMode","a","b","result","buttons","numberOfModes","selectButton","handleClick","gameOver","scale","unshift","splice","bString","len","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7887f651.chunk.js","sourcesContent":["/**\n * A helper class for constructing scales.\n */\nclass Scale {\n\n  // Each scale is two octaves.\n  static twoOctaves = 24;\n  \n  static modes = {\n    names: [\n      \"Ionian\", \n      \"Dorian\", \n      \"Phrygian\", \n      \"Lydian\", \n      \"Mixolydian\",\n      \"Aeolian\",\n      \"?\"\n    ],\n    // Each mode is based on the same pattern of tones and semi-tones.\n    pattern: [2, 2, 1, 2, 2, 2, 1],\n  };\n\n  constructor(name, notes) {\n    this.name = name;\n    this.notes = notes;\n  }\n\n  /**\n   * Constructs and empty scale.\n   */\n  static empty() {\n    return new Scale(\"Empty\", this.emptyArray());\n  }\n\n  static emptyArray() {\n    return Array(this.twoOctaves).fill(false);\n  }\n\n  /**\n   * Constructs the given mode.\n   */\n  static mode(scale_mode) {\n    if (scale_mode < 0 || scale_mode >= Scale.modes.names.length) {\n      throw new Error(\"Mode must be between 0 and 6\");\n    }\n    return new Scale(this.modes.names[scale_mode], this.patternToNotes(scale_mode));\n  }\n  \n  /**\n   * Constructs the mode from the pattern, starting at the given point.\n   */\n  static patternToNotes(startingPoint) {\n    var notes = this.emptyArray();    \n    var pattern = this.modes.pattern;\n\n    var spotInPattern = startingPoint;\n    var nextNote = 0;\n    var i;\n    for (i = 0; i <= this.twoOctaves; i++) {\n      if (i === nextNote) {\n        notes[i] = true;\n        nextNote += pattern[spotInPattern];\n        spotInPattern = (spotInPattern + 1) % pattern.length;\n      }\n    }\n\n    return notes;\n  }\n}\n\nexport default Scale;\n","import React from 'react';\nimport './App.css';\nimport Scale from './Scale.js';\n\nconst assert = require('assert');\n\n\n/*\n * A functional component representing a fret on a guitar.\n */\nfunction Fret(props) {\n  return (\n    <button\n      className=\"fret\"\n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n\n/**\n * A component representing a guitar fretboard, wrapping an array of Frets.\n */\nclass FretBoard extends React.Component {\n  renderFret(i) {\n    return (\n      <Fret \n        key={i.toString()}\n        value={this.props.marks[i]}\n        onClick={() => this.props.onClick(i)}\n      />      \n    );\n  }\n\n  /**\n   * Renders a row of Frets.\n   */\n  renderString(j) {\n    const frets = [];\n    var i;\n    for (i=0; i < this.props.fretsPerString; i++) {\n      frets.push(this.renderFret(j * this.props.fretsPerString + i));\n    }\n    return (\n      <div className=\"string\" key={j.toString()}>\n        {frets}\n      </div>\n    );\n  }\n\n  render() {\n    const strings = [];\n    var i;\n    for (i = this.props.strings - 1; i >= 0; i--) {\n      strings.push(this.renderString(i));\n    }\n    return (\n      <div className=\"fretboard\">\n        {strings}\n      </div>\n    );\n  }\n}\n\n\n/**\n * A button interface representing a section of a guitar fretboard.\n * It has 6 strings, and each string has 5 frets.\n * The user selects which scale they want to test, and the fretboard tells them\n * whether their selected notes are in the scale or not, with a \"O\" or and \"X\".\n */\nclass FretBoardInterface extends React.Component {\n\n  static strings = 6;\n  // The fifth fret on the G string and the first on the B string are the same note.\n  // Taking this into account requires extra logic.\n  static bString = 4;                                                         \n  static fretsPerString = 5;\n\n  constructor(props) {\n    super(props);\n    var empty = Scale.empty();\n    this.state = {\n      mode:        empty,\n      notes:       FretBoardInterface.scaleToFretboard(empty),\n      userValues:  FretBoardInterface.scaleToFretboard(empty),\n      marks:       FretBoardInterface.scaleToFretboard(empty),\n    };\n  }\n\n  /**\n   * Converts a scale object to an array of the appropriate length.\n   */\n  static scaleToFretboard(scale) {\n    var notes = scale.notes.slice();\n    notes.unshift(false);                                                    // Start the scale on the second fret.\n    notes.splice(this.bString * this.fretsPerString, 0, false);              // Need to add a shift before the B string.\n    var len = this.strings * this.fretsPerString - notes.length;\n    for (len; len > 0; len--) {\n      notes.push(false);\n    }\n    return notes;\n  }\n\n  /**\n   * Toggles the user's value in fret i and calculates the new marks.\n   * Updates state.\n   */\n  handleClick(i) {\n    var newValues = this.state.userValues.slice();\n    newValues[i] = !newValues[i];\n    this.setState({\n      userValues: newValues,\n      marks: this.setMark(i, this.state.marks.slice(), newValues, this.state.notes),\n    });\n  }\n\n  setMark(i, marks, userValues, notes) {\n    if (userValues[i]) {\n      marks[i] = notes[i] ? \"O\" : \"X\";      \n    } else {\n      marks[i] = \" \";\n    }    \n    return marks;\n  }\n\n  /**\n   * Changes the mode that the user is testing against.\n   * Preserves the user's input, and recalculates the marks.\n   * Updates state.\n   */\n  changeMode(m) {\n    var newScale = Scale.mode(m);\n    var newNotes = FretBoardInterface.scaleToFretboard(newScale);\n    var newMarks = this.refreshMarks(newNotes);\n    this.setState({\n      mode:  newScale,\n      notes: newNotes,\n      marks: newMarks,\n    });\n  }\n\n  /**\n   * Computes marks array directly by comparing user's input and the notes.\n   */\n  refreshMarks(notes) {\n    var newMarks = this.state.marks.slice();\n    var i;\n    for (i = 0; i < this.state.marks.length; i++) {\n      this.setMark(i, newMarks, this.state.userValues, notes);\n    }\n    return newMarks;\n  }\n\n  /**\n   * Button for selecting the mode.\n   */ \n  selectButton(m) {\n    return (\n      <button \n        className=\"select-button\" \n        key={m.toString()} \n        onClick={() => this.changeMode(m)}\n      >\n        {Scale.modes.names[m]}\n      </button>\n    );\n  }\n\n  /**\n   * Determines if the user has correctly completed the mode.\n   */\n  gameOver() { \n    var a = this.state.notes;\n    var b = this.state.userValues;\n    assert(a.length === b.length);\n    var result = true;\n    var i;\n    for (i = 0; i < this.state.notes.length; i++) {\n      result = result && (a[i] === b[i]);\n    }\n    return result;\n  }\n\n  /**\n   * Render.\n   */\n  render() {\n    // Make array of mode select buttons.\n    var buttons = [];\n    var numberOfModes = Scale.modes.names.length;\n    var i;\n    for (i = 0; i < numberOfModes; i++) {\n      buttons.push(this.selectButton(i));\n    }\n\n    return (\n      <div>\n        <FretBoard \n          strings={FretBoardInterface.strings}  \n          fretsPerString={FretBoardInterface.fretsPerString}\n          marks={this.state.marks}\n          onClick={(i) => this.handleClick(i)}\n        />\n        {buttons}\n        <div>\n          {this.state.mode.name}\n        </div>\n        <div>\n          {this.gameOver() ? \"You did it!\" : \"Keep trying!\"}\n        </div>\n      </div>\n    );\n  }\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <p>\n            Learn To Play Guitar.\n          </p>\n        </div>\n        <div className=\"App-fretboard\">\n          <FretBoardInterface />\n        </div>\n      </header>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}